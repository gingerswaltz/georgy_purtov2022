import math
import numpy as np

# Этот код отвечает за создание матрицы проекции и матрицы преобразования в экранные координаты,
# необходимых для корректного отображения трехмерных объектов на двумерном экране.
# Без этого кода объекты не будут правильно проецироваться и отображаться на экране,
# что приведет к некорректному отображению сцены и ее элементов при использовании трехмерной графики.

class Projection:
    def __init__(self, render):
        NEAR = render.camera.near_plane  # Ближняя плоскость отсечения
        FAR = render.camera.far_plane  # Дальняя плоскость отсечения
        RIGHT = math.tan(render.camera.h_fov / 2)  # Правая граница обзора камеры
        LEFT = -RIGHT  # Левая граница обзора камеры
        TOP = math.tan(render.camera.v_fov / 2)  # Верхняя граница обзора камеры
        BOTTOM = -TOP  # Нижняя граница обзора камеры

        # Рассчет элементов матрицы проекции
        m00 = 2 / (RIGHT - LEFT)
        m11 = 2 / (TOP - BOTTOM)
        m22 = (FAR + NEAR) / (FAR - NEAR)
        m32 = -2 * NEAR * FAR / (FAR - NEAR)
        # Создание матрицы проекции
        self.projection_matrix = np.array([
            [m00, 0, 0, 0],
            [0, m11, 0, 0],
            [0, 0, m22, 1],
            [0, 0, m32, 0]
        ])

        HW, HH = render.H_WIDTH, render.H_HEIGHT  # Половина ширины и высоты экрана
        # Создание матрицы для перевода в экранные координаты
        self.to_screen_matrix = np.array([
            [HW, 0, 0, 0],
            [0, -HH, 0, 0],
            [0, 0, 1, 0],
            [HW, HH, 0, 1]
        ])
